<?php
/**
 * @file
 * feednode is a module that provides nodes that represent aggregator feeds.
 * For users to see feed content, "access to feeds" needs to be enabled
 */

/**
 * Implementation of hook_help()
 * Display help text for the feednode module 
 */
function feednode_help($section) {
  switch ($section) {
    case 'admin/help#feednode':
      return '<p>' . t('Create and manage nodes representing aggregator feeds.') . '</p>';
    case 'admin/modules#description':
      return t('Allows users to create and manage feeds.');
    case 'node/add#feednode':
      return t('Create an aggregator feed.');
  }
}

/**
 * Feednode custom nodetype
 */
function feednode_node_info() {
  return array('feednode' => array(
    'name' => t('Feednode'),
    'base' => 'feednode',
    'description' => t('Nodes zur Kapselung von Aggregator Feeds.'),
  ));
}

/**
 * Implements hook_permission().
 */
function feednode_permission() {
  return array(
    'create feednode' => array(
      'title' => t('Create feednodes'),
    ), 
    'edit own feednodes' => array(
      'title' => t('Edit own feednodes'),
    )
  );
}

/**
 * Implements hook_access().
 */
function feednode_access($op, $node) {
  global $user;

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create feednode');
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own feednodes') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
} 

/**
 * Implements hook_form()
 * Display the feed form
 */
function feednode_form($node, &$form_state) {
  require_once drupal_get_path('module', 'aggregator') . '/aggregator.admin.inc';
  $form = drupal_retrieve_form('aggregator_form_feed', $form_state);
  //var_dump("FORM", $node);
  if (!empty($node->fid)) {
    $form['title']['#default_value'] = $node->title;
    $form['url']['#default_value'] = $node->url;
    $form['refresh']['#default_value'] = $node->refresh;
    $form['fid'] = array('#type' => 'value', '#value' => $node->fid);
  }
  unset($form['submit']);

  return $form;
}

/**
 * Implemention of hook_load
 * @param node object to load additional information for
 * @return object with additional fields from feed
 */
function feednode_load($nodes) {
  $result = db_query('SELECT nid, fid FROM {feednode} WHERE nid IN (:nids)', array(
    ':nids' => array_keys($nodes)
  )); 
  foreach ($result as $record) {
    $feed = aggregator_feed_load($record->fid);
    //var_dump("LOAD", $feed);
    $nodes[$record->nid]->fid = $record->fid;
  }
}

function _feednode_save($node) {
  //var_dump("SAVE", $node);
  if (empty($node->fid)) {
    // check if a feed with this URL is already in the system
    $result = db_query(
      "SELECT fid FROM {aggregator_feed} WHERE url = :url", array(
      ':url' => $node->url
    ));
    foreach ($result as $feed) { 
      $node->fid = $feed->fid;
      break;
    }
  }
  $node_as_array = get_object_vars($node);
  aggregator_save_feed($node_as_array);
error_log(json_encode($node_as_array));
  if (!isset($node->fid)) {
    $node->fid = $node_as_array['fid'];
  }
  db_query(
    'REPLACE INTO {feednode} (nid,fid) VALUES (:nid,:fid)', array(
    ':nid' => $node->nid, 
    ':fid' => $node->fid
  ));

  aggregator_refresh(aggregator_feed_load($node->fid));
}

/**
 * Implements hook_insert
 * @param node object
 */
function feednode_insert($node) {
  _feednode_save($node);
}

/**
 * Implements hook_update
 * @param node object
 */
function feednode_update($node) {
  _feednode_save($node);
}

/**
 * Implements hook_delete
 * @param node object
 */
function feednode_delete($node) {
  aggregator_save_feed(array('fid' => $node->fid));
  db_query('DELETE FROM {feednode} WHERE nid=:nid', array(
    ':nid' => $node->nid
  ));
}

/**
 * Implements hook_view, add our node specific information
 * @param node object to display
 * @param boolean is this a teaser or full node?
 * @param boolean is this displaying on its own page
 */
function feednode_view($node, $teaser = FALSE, $page = FALSE) {
  if (empty($node->fid)) {
    return $node;
  }
  $block = aggregator_block_view('feed-' . $node->fid);

  $node->content['items'] = array(
    '#markup' => $block['content'],
    '#weight' => 1,
  );

  return $node;
}

/**
 * Implements hook_user
 * Associate an authorqueue with a user for display
 */
function feednode_user_view($account, $view_mode, $langcode) {
  global $user;
  
  $subqueues = nodequeue_load_subqueues_by_reference(array(
    1 => array($account->uid)));
  $subqueue = array_shift($subqueues);
  
  if ($account->uid == $user->uid) {
    $account->content['feednode']['edit_link'] = array(
      '#markup' => l('Queue bearbeitenÂ»', 'admin/content/nodequeue/1/view/' . $subqueue->sqid)
    );
  }
  $account->content['feednode']['nodes'] = 
    nodequeue_view_nodes($subqueue->sqid, /*backward*/TRUE, /*teaser*/FALSE);
}
